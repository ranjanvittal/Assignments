//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */



public class GJDepth<R,A> extends GJDepthFirst<R,A> {
		String currentMethod;
		int startStmtCount = 0;
		Hashtable<String, Hashtable<Integer, Successors>> succForMethod = new Hashtable<String, Hashtable<Integer, Successors>>();
		Hashtable<String, Hashtable<Integer, Set<Integer>>> useForMethod = new Hashtable<String, Hashtable<Integer, Set<Integer>>>();
		Hashtable<String, Hashtable<Integer, Integer>> defForMethod = new Hashtable<String, Hashtable<Integer, Integer>>();
		Hashtable<String, Hashtable< Integer, Range>> liveRangeForMethod = new Hashtable<String, Hashtable<Integer, Range>>();
		Hashtable<String, Integer> argumentCount = new Hashtable<String, Integer>();
		Hashtable<Integer, Range> liveRange;
		ArrayList<TempBegin> active;
		Hashtable<Integer, Integer> spilledArg;
		ArrayList<String> freeList;
		Hashtable<Integer, String> registerAllocated;
		int spillCount;
		Hashtable<String, Hashtable<Integer, String>> allocateForMethod = new Hashtable<String, Hashtable<Integer, String>>();
		Hashtable<String, Hashtable<Integer, Integer>> spillForMethod = new Hashtable<String, Hashtable<Integer, Integer>>();
		
		class TempBegin implements Comparator<TempBegin>, Comparable<TempBegin>{
			   int temp;
			   int begin;
			   int end;
			   // Overriding the compareTo method
			   public int compareTo(TempBegin d){
			      return (this.begin) - (d.begin);
			   }

			   // Overriding the compare method to sort the age 
			   public int compare(TempBegin d, TempBegin d1){
			      return d.end - d1.end;
			   }
			}

		List<TempBegin> tempBegin;
//
   // Auto class visitors--probably don't need to be overridden.
   //

    public GJDepth(Object labels) {
    	this.labels = (Hashtable<String, Integer>) labels;
    }
    
    public void printSucc(Hashtable<Integer, Successors> a) {
    	Enumeration b = a.keys();
    	print("Printing succ");
    	while(b.hasMoreElements()) {
    		Integer c = (Integer) b.nextElement();
    		print(c + " : ");
    		Successors s  = a.get(c);
    		if(s.first != null) print(s.first);
    		if(s.second != null) print(s.second);
    	}
    }
    
    public void printUse(Hashtable<Integer, Set<Integer>> a) {
    	Enumeration b = a.keys();
    	print("Printing uses");
    	while(b.hasMoreElements()) {
    		Integer c = (Integer) b.nextElement();
    		print(c + " : ");
    		Set<Integer> s  = a.get(c);
    		print(s);
    	}
    }
    
    public void printDef(Hashtable<Integer, Integer> a) {
    	Enumeration b = a.keys();
    	print("Printing defs");
    	while(b.hasMoreElements()) {
    		Integer c = (Integer) b.nextElement();
    		Integer s  = a.get(c);
    		print(c + " : " + s);
    	}
    }
    public void makeInsAndOuts () {
       liveIn = new Hashtable<Integer, Set<Integer>>();
       liveOut = new Hashtable<Integer, Set<Integer>>();			
       for(int i = startStmtCount; i < stmtCount; i++) {
          liveIn.put(new Integer(i), new HashSet<Integer>());
          liveOut.put(new Integer(i), new HashSet<Integer>());
       }
       for(;;) {
          int overall_diff = 0;
          for(int i = startStmtCount; i < stmtCount; i++) {
            Integer stmt = new Integer(i);
            int inCt = num_elem(liveIn.get(stmt));
            int outCt = num_elem(liveOut.get(stmt));
            Set<Integer> outI = liveOut.get(new Integer(i));
            Set<Integer> makingIn = new HashSet<Integer>();
            Set<Integer> makingOut = new HashSet<Integer>();
            Set<Integer> currentUses = uses.get(stmt);
            //print(stmt);
            //print(currentUses);
            Successors successors = succ.get(stmt);
            makingIn.addAll(outI);
            makingIn.remove(def.get(stmt));
            makingIn.addAll(currentUses);
            //print("here");
            liveIn.put(stmt, makingIn);

            overall_diff += num_elem(makingIn) - inCt;

            if(successors.first != null) {
                makingOut.addAll(liveIn.get(successors.first));
            }

            if(successors.second != null) {
                makingOut.addAll(liveIn.get(successors.second));
            }
            overall_diff += num_elem(makingOut) - outCt;
            liveOut.put(stmt, makingOut);
          }
        if(overall_diff == 0)
          break;
      }
      makeLiveRange();
   }
    
   public void makeLiveRange(){
	   liveRange = new Hashtable<Integer, Range>();
	   int count = argumentCount.get(currentMethod);
	   for(int i = startStmtCount; i < stmtCount; i++) {
		   int definition = def.get(i);
		   if(definition != -1) {
			   if(!liveRange.containsKey(definition)) {
				   Range a = new Range();
				   a.begin = i;
				   liveRange.put(definition, a);
			   }
		   }
	   }
	   for(int i = startStmtCount; i < stmtCount; i++) {
		   Iterator it = liveIn.get(i).iterator();
		   while(it.hasNext()) {
			   int k = (Integer) it.next();
			   if(k >= count) {
				   liveRange.get(k).end = i;
			   }
		   }
	   }
	   
	   liveRangeForMethod.put(currentMethod, liveRange);
	   print(currentMethod);
	   //printLiveRange(liveRange);
	   makeRange();
	   allocateRegister();
	   //printAllocated(registerAllocated);
	   print("printing spilled args");
	   Enumeration e = spilledArg.keys();
	   for(int i = 0 ; i < spilledArg.size(); i++) {
		   Integer key = (Integer) e.nextElement();
		   print(key + " : " + spilledArg.get(key));
	   }
	   allocateForMethod.put(currentMethod, registerAllocated);
	   spillForMethod.put(currentMethod, spilledArg);
   }
   public void makeRange() {
	   Enumeration name = liveRange.keys();
	   tempBegin = new ArrayList<TempBegin>();
	   int k = 0;
	   while(name.hasMoreElements()) {
		   Integer elem = (Integer) name.nextElement();
		   TempBegin a = new TempBegin();
		   a.temp = elem;
		   a.begin = liveRange.get(elem).begin;
		   a.end = liveRange.get(elem).end;
		   tempBegin.add(a);
	   }
	   Collections.sort(tempBegin);//sorting on begin
//	   for(int i = 0;i < tempBegin.size(); i++) {
//		   print(tempBegin.get(i).temp + " : " + tempBegin.get(i).begin + " " + tempBegin.get(i).end);
//	   }
	   
   }
   public void allocateRegister() {
	   active = new ArrayList<TempBegin>();
	   spilledArg = new Hashtable<Integer, Integer>();
	   spillCount = 0;
	   registerAllocated = new Hashtable<Integer, String>();
	   freeList = new ArrayList<String>();
	   freeList.add("t0");
	   freeList.add("t1");
	   freeList.add("t2");
	   freeList.add("t3");
	   freeList.add("t4");
	   freeList.add("t5");
	   freeList.add("t6");
	   freeList.add("t7");
   		for(int i = 0;i < tempBegin.size(); i++) {
   			expireOldIntervals(tempBegin.get(i));
   			if(active.size() == 8) {
   				spillAtInterval(tempBegin.get(i));
   			}
   			else {
   					active.add(tempBegin.get(i));
   					registerAllocated.put(tempBegin.get(i).temp, freeList.remove(0));
  					Collections.sort(active, new TempBegin());
				}
     		}
	}
   
   public void expireOldIntervals(TempBegin i) {
	   for(int j = 0;j < active.size(); j++) {
		   if(active.get(j).end >= i.begin) return;
		   TempBegin t = active.remove(j);
		   freeList.add(0, registerAllocated.get(t.temp));
	   }
   }
   
   public void spillAtInterval(TempBegin i) {
           TempBegin spill = active.get(active.size()-1);
           if(spill.end > i.end) {
           //register[i] ‚Üê register[spill]
//        	   print(spill.temp);
//        	   System.out.println(registerAllocated.containsKey(spill.temp));
        	   registerAllocated.put(i.temp, registerAllocated.get(spill.temp));
        	   registerAllocated.remove(spill.temp);
        	   spilledArg.put(spill.temp, spillCount++);
        	   active.remove(active.size()-1);
        	   active.add(i);
        	   Collections.sort(active, new TempBegin());
       	   //remove spill from active
       	   //add i to active, sorted by increasing end point
           }
       	   else {
       		spilledArg.put(i.temp, spillCount++);
       	   }
      }
   
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      currentMethod = "main";
      stmtCount++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      stmtCount++;
      argumentCount.put(currentMethod,  0);
      makeInsAndOuts();
      succForMethod.put(currentMethod, succ);
      defForMethod.put(currentMethod, def);
      useForMethod.put(currentMethod, uses);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      //liveIn = new Hashtable<Integer, Set<Integer>>();
      startFlag = true;
      uses = new Hashtable<Integer, Set<Integer>>();
      //liveOut = new Hashtable<Integer, Set<Integer>>();
      def = new Hashtable<Integer, Integer>();
      succ = new Hashtable<Integer, Successors>();
      startStmtCount = stmtCount + 1;
      n.f0.accept(this, argu);
      //printSucc(succ);
      //printDef(def);
      //printUse(uses);
      
      
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      stmtCount++;
      currentMethod = (String) n.f0.accept(this, argu);
      
      
      n.f1.accept(this, argu);
      Integer i  = (Integer) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      argumentCount.put(currentMethod,  i);
      makeInsAndOuts();
      succForMethod.put(currentMethod, succ);
      defForMethod.put(currentMethod, def);
      useForMethod.put(currentMethod, uses);
      
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      stmtCount++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      stmtCount++;
      Integer a = (Integer) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if( a != -1) {
    	  use.add(a);
      }
      succ.get(stmtCount-1).second = stmtCount;
      uses.put(stmtCount, use);
      def.put(stmtCount, minusOne);
      succ.put(stmtCount, new Successors());
      stmtCount++;
      return _ret;
   }
   
   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      stmtCount++;
      if(!startFlag && !jflag) {
          Successors successor = succ.get(stmtCount - 1);
          
          successor.second = new Integer(stmtCount);
      }
      jflag = false;
      n.f0.accept(this, argu);
      startFlag = false;
      return _ret;
   }
   


   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      uses.put(stmtCount, new HashSet<Integer>());
      def.put(stmtCount, minusOne);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      uses.put(stmtCount, new HashSet<Integer>());
      def.put(stmtCount, minusOne);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer useTemp = (Integer) n.f1.accept(this, argu);
      Set<Integer> u = new HashSet<Integer>();
      u.add(useTemp);
      uses.put(stmtCount, u);
      def.put(stmtCount, minusOne);
      String label = (String) n.f2.accept(this, argu);
      Successors s = new Successors();
      s.first = labels.get(label);
      succ.put(stmtCount, s);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      Successors s = new Successors();
      s.first = labels.get(label);
      def.put(stmtCount, minusOne);
      succ.put(stmtCount, s);
      uses.put(stmtCount, new HashSet<Integer>());
      jflag = true;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      Integer use1 = (Integer) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Integer use2 = (Integer) n.f3.accept(this, argu);
      Set<Integer> useTemp = new HashSet<Integer>();
      useTemp.add(use1);
      useTemp.add(use2);
      uses.put(stmtCount, useTemp);
      def.put(stmtCount, -1);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>(); 
      def.put(stmtCount, (Integer) n.f1.accept(this, argu));
      use.add((Integer) n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      uses.put(stmtCount, use);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      Integer defined = (Integer) n.f1.accept(this, argu);
      use.addAll((Set<Integer>) n.f2.accept(this, argu));
      Successors s = new Successors();
      succ.put(stmtCount, s);
      uses.put(stmtCount,use);
      def.put(stmtCount, defined);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer a = (Integer) n.f1.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if(a != -1) 
    	  use.add(a);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      uses.put(stmtCount, use);
      def.put(stmtCount, minusOne);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which != 3)
    	  return n.f0.accept(this, argu);
      Integer a = (Integer) n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if(a != -1) 
    	  use.add(a);
      return (R) use;
   }



   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer a = (Integer) n.f1.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if(a != -1) {
    	  use.add(a);
      }
      
      n.f2.accept(this, argu);
      Vector<Node> b = n.f3.nodes;
      int i = 0;
      while(i < b.size()) {
    	  use.add((Integer) b.elementAt(i).accept(this, argu));
    	  i++;
      }
      n.f4.accept(this, argu);
      return (R) use;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      Integer a = (Integer) n.f1.accept(this, argu);
      if(a != -1) {
    	  use.add(a);
      }
      return (R) use;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer a = (Integer) n.f1.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      use.add(a);
      a = (Integer) n.f2.accept(this, argu);
      if(a != -1) {
    	  use.add(a);
      }
      return (R) use;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      //R _ret=null;
	  if(n.f0.which == 0)
		  return n.f0.accept(this, argu);
	  n.f0.accept(this, argu);
	  return (R) Int(-1);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return (R) new Integer(n.f1.f0.toString());
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) Int(n.f0.toString());
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

}
