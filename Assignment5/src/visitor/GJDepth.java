//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepth<R,A> extends GJDepthFirst<R,A> {
		String currentMethod;
		Hashtable<String, Hashtable<Integer, Successors>> succForMethod = new Hashtable<String, Hashtable<Integer, Successors>>();
		Hashtable<String, Hashtable<Integer, Set<Integer>>> useForMethod = new Hashtable<String, Hashtable<Integer, Set<Integer>>>();
		Hashtable<String, Hashtable<Integer, Integer>> defForMethod = new Hashtable<String, Hashtable<Integer, Integer>>();
//
   // Auto class visitors--probably don't need to be overridden.
   //

    public GJDepth(Object labels) {
    	this.labels = (Hashtable<String, Integer>) labels;
    }
    
    public void printSucc(Hashtable<Integer, Successors> a) {
    	Enumeration b = a.keys();
    	print("Printing succ");
    	while(b.hasMoreElements()) {
    		Integer c = (Integer) b.nextElement();
    		print(c + " : ");
    		Successors s  = a.get(c);
    		if(s.first != null) print(s.first);
    		if(s.second != null) print(s.second);
    	}
    }
    
    public void printUse(Hashtable<Integer, Set<Integer>> a) {
    	Enumeration b = a.keys();
    	print("Printing uses");
    	while(b.hasMoreElements()) {
    		Integer c = (Integer) b.nextElement();
    		print(c + " : ");
    		Set<Integer> s  = a.get(c);
    		print(s);
    	}
    }
    
    public void printDef(Hashtable<Integer, Integer> a) {
    	Enumeration b = a.keys();
    	print("Printing defs");
    	while(b.hasMoreElements()) {
    		Integer c = (Integer) b.nextElement();
    		Integer s  = a.get(c);
    		print(c + " : " + s);
    	}
    }
    public void makeInsAndOuts (String method) {
       for(int i = 1; i <= stmtCount; i++) {
          liveIn.put(new Integer(i), new HashSet<Integer>());
          liveOut.put(new Integer(i), new HashSet<Integer>());
       }
       for(;;) {
          int overall_diff = 0;
          for(int i = 1; i <= stmtCount; i++) {
            Integer stmt = new Integer(i);
            int inCt = num_elem(liveIn.get(stmt));
            int outCt = num_elem(liveOut.get(stmt));
            Set<Integer> outI = liveOut.get(new Integer(i));
            Set<Integer> makingIn = new HashSet<Integer>();
            Set<Integer> makingOut = new HashSet<Integer>();
            Set<Integer> currentUses = uses.get(stmt);
            
            Successors successors = succ.get(stmt);
            makingIn.addAll(outI);
            makingIn.remove(def.get(stmt));
            makingIn.addAll(currentUses);

            liveIn.put(stmt, makingIn);

            overall_diff += num_elem(makingIn) - inCt;

            if(successors.first != null) {
                makingOut.addAll(liveIn.get(successors.first));
            }

            if(successors.first != null) {
                makingOut.addAll(liveIn.get(successors.second));
            }
            overall_diff += num_elem(makingOut) - outCt;
            liveOut.put(stmt, makingOut);
          }
        if(overall_diff == 0)
          break;
      }
      printhash(liveIn);
      printhash(liveOut);

   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      currentMethod = "main";
      stmtCount++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      stmtCount++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      //liveIn = new Hashtable<Integer, Set<Integer>>();
      startFlag = true;
      uses = new Hashtable<Integer, Set<Integer>>();
      //liveOut = new Hashtable<Integer, Set<Integer>>();
      def = new Hashtable<Integer, Integer>();
      succ = new Hashtable<Integer, Successors>();
      n.f0.accept(this, argu);
      printSucc(succ);
      printDef(def);
      printUse(uses);
      succForMethod.put(currentMethod, succ);
      defForMethod.put(currentMethod, def);
      useForMethod.put(currentMethod, uses);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      currentMethod = (String) n.f0.accept(this, argu);
      stmtCount++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      stmtCount++;
      if(!startFlag && !jflag) {
          Successors successor = succ.get(stmtCount - 1);
          
          successor.second = new Integer(stmtCount);
      }
      jflag = false;
      n.f0.accept(this, argu);
      startFlag = false;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      uses.put(stmtCount, new HashSet<Integer>());
      def.put(stmtCount, minusOne);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      uses.put(stmtCount, new HashSet<Integer>());
      def.put(stmtCount, minusOne);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer useTemp = (Integer) n.f1.accept(this, argu);
      Set<Integer> u = new HashSet<Integer>();
      u.add(useTemp);
      uses.put(stmtCount, u);
      def.put(stmtCount, minusOne);
      String label = (String) n.f2.accept(this, argu);
      Successors s = new Successors();
      s.first = labels.get(label);
      succ.put(stmtCount, s);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      Successors s = new Successors();
      s.first = labels.get(label);
      def.put(stmtCount, minusOne);
      succ.put(stmtCount, s);
      uses.put(stmtCount, new HashSet<Integer>());
      jflag = true;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      Integer use1 = (Integer) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Integer use2 = (Integer) n.f3.accept(this, argu);
      Set<Integer> useTemp = new HashSet<Integer>();
      useTemp.add(use1);
      useTemp.add(use2);
      uses.put(stmtCount, useTemp);
      def.put(stmtCount, -1);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>(); 
      use.add((Integer) n.f1.accept(this, argu));
      use.add((Integer) n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      uses.put(stmtCount, use);
      def.put(stmtCount, minusOne);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      Integer defined = (Integer) n.f1.accept(this, argu);
      use.addAll((Set<Integer>) n.f2.accept(this, argu));
      Successors s = new Successors();
      succ.put(stmtCount, s);
      uses.put(stmtCount,use);
      def.put(stmtCount, defined);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer a = (Integer) n.f1.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if(a != -1) 
    	  use.add(a);
      Successors s = new Successors();
      succ.put(stmtCount, s);
      uses.put(stmtCount, use);
      def.put(stmtCount, minusOne);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which != 3)
    	  return n.f0.accept(this, argu);
      Integer a = (Integer) n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if(a != -1) 
    	  use.add(a);
      return (R) use;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      stmtCount++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      stmtCount++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      stmtCount++;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer a = (Integer) n.f1.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      if(a != -1) {
    	  use.add(a);
      }
      
      n.f2.accept(this, argu);
      Vector<Node> b = n.f3.nodes;
      int i = 0;
      while(i<b.size()) {
    	  use.add((Integer) b.elementAt(i).accept(this, argu));
    	  i++;
      }
      n.f4.accept(this, argu);
      return (R) use;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      Integer a = (Integer) n.f1.accept(this, argu);
      if(a != -1) {
    	  use.add(a);
      }
      return (R) use;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer a = (Integer) n.f1.accept(this, argu);
      Set<Integer> use = new HashSet<Integer>();
      use.add(a);
      a = (Integer) n.f2.accept(this, argu);
      if(a != -1) {
    	  use.add(a);
      }
      return (R) use;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      //R _ret=null;
	  if(n.f0.which == 0)
		  return n.f0.accept(this, argu);
	  n.f0.accept(this, argu);
	  return (R) Int(-1);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return (R) new Integer(n.f1.f0.toString());
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) Int(n.f0.toString());
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

}
