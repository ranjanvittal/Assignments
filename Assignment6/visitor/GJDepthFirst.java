//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  public String beginFunction(String function) {
      return "\t\t.text\n\t\t.globl\t\t" + function + "\n" + function + ":\n";
  }
  String printValue = "";
  int numberOfArgs = 0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      printValue += beginFunction("main");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      numberOfArgs = (Integer) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      numberOfArgs += 1;
      numberOfArgs *= 4;
      numberOfArgs += 16;
      printValue += "\t\tmove $fp, $sp\n";
      printValue += "\t\tsubu $sp, $sp, " + numberOfArgs + "\n";
      printValue += "\t\tsw $ra, -4($fp)\n";
      numberOfArgs -= 16;
      numberOfArgs /= 4;
      numberOfArgs -= 1;
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      numberOfArgs += 1;
      numberOfArgs *= 4;
      numberOfArgs += 16;
      printValue += "\t\tlw $ra, -4($fp)\n";
      printValue += "\t\taddu $sp, $sp, " + numberOfArgs + "\n";
      printValue += "\t\tli $v0, 10\n";
      printValue += "\t\tsyscall\n\n";
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      printValue += beginFunction("_halloc");
      printValue += "\t\tli $v0, 9\n";
      printValue += "\t\tsyscall\n";
      printValue += "\t\tjr $ra\n\n";
      printValue += beginFunction("_print");
      printValue += "\t\tli $v0, 1\n";
      printValue += "\t\tsyscall\n";
      printValue += "\t\tla $a0, newl\n";
      printValue += "\t\tli $v0, 4\n";
      printValue += "\t\tsyscall\n";
      printValue += "\t\tjr $ra\n\n";
      printValue += "\t\t.data";
      printValue += "\t\t.align   0\n";
      printValue += "newl:\t\t.asciiz \"\\n\"\n\n";
      printValue += "\t\t.data\n";
      printValue += "\t\t.align 0\n";
      printValue += "str_er:  .asciiz \" ERROR: abnormal termination\\n\"\n ";
      System.out.println(printValue);
      return _ret;
   }

  /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      Vector<Node> n1 = n.f0.nodes;
      int i = 0;
      while(i < n1.size()) {
        NodeSequence n2 = (NodeSequence) n1.elementAt(i);
        NodeOptional n3 = (NodeOptional) n2.elementAt(0);
        String label = (String) n3.accept(this, argu);
        if(n3.present())
          printValue += label + ":\n";
        n2.accept(this, argu);
        i++;
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String function = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      numberOfArgs = (Integer) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      numberOfArgs += 1;
      numberOfArgs *= 4;
      numberOfArgs += 16;
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      printValue += beginFunction(function);
      printValue += "\t\tsw $fp, -8($sp)\n";
      printValue += "\t\tmove $fp, $sp\n";
      printValue += "\t\tsubu $sp, $sp, " + numberOfArgs + "\n";
      printValue += "\t\tsw $ra, -4($fp)\n";
      numberOfArgs -= 16;
      numberOfArgs /= 4;
      numberOfArgs -= 1;
      n.f10.accept(this, argu);
      numberOfArgs += 1;
      numberOfArgs *= 4;
      numberOfArgs += 16;
      numberOfArgs -= 8;
      printValue += "\t\tlw $ra, -4($fp)\n";
      printValue += "\t\tlw $fp, " + numberOfArgs + "($sp)\n";
      numberOfArgs += 8;
      printValue += "\t\taddu $sp, $sp, " + numberOfArgs + "\n";
      printValue += "\t\tjr $ra\n\n";
      n.f11.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      printValue += "\t\tnop\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      printValue += "\t\tla $a0, str_er\n";
      printValue += "\t\tsyscall\n";
      printValue += "\t\tli $v0, 10\n";
      printValue += "\t\tsyscall\n";
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String) n.f1.accept(this, argu);
      String label = (String) n.f2.accept(this, argu);
      printValue += "\t\tbeqz " + register + label + "\n";
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      printValue += "\t\tb " + label + "\n";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register1 = (String) n.f1.accept(this, argu);
      Integer offset = (Integer) n.f2.accept(this, argu);
      String register2 = (String) n.f3.accept(this, argu);
      printValue += "\t\tsw " + register2 + ", " + offset + "(" + register1 + ")\n";
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register1 = (String) n.f1.accept(this, argu);
      String register2 = (String) n.f2.accept(this, argu);
      Integer offset = (Integer) n.f3.accept(this, argu);
      printValue += "\t\tlw " + register1 + offset + "(" + register2 + ")\n";
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String) n.f1.accept(this, argu);
      n.f2.accept(this, (A) register);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) " $a0 ");
      printValue += "\t\tjal _print\n";
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String) n.f1.accept(this, argu);
      Integer stackLocation = (Integer) n.f2.accept(this, argu);
      if(stackLocation/4 + 4 < numberOfArgs)
          printValue += "\t\tlw " + register + stackLocation + "($fp)\n";
      else
          printValue += "\t\tlw " + register + stackLocation + "($sp)\n";
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer stackLocation = (Integer) n.f1.accept(this, argu);
      String register = (String) n.f2.accept(this, argu);
      printValue += "\t\tsw " + register + stackLocation + "($sp)\n";
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer offset = (Integer) n.f1.accept(this, argu);
      String register = (String) n.f2.accept(this, argu);
      offset -= 1;
      offset *= 4;
      printValue += "\t\tsw" + register + ", " + offset + "($sp)\n";
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f1.f0.which) {
        case 0 : printValue += "\t\tjalr " + (String) n.f1.accept(this, argu) + "\n"; break;
        case 2 : printValue += "\t\tjal " + (String) n.f1.accept(this, argu) + "\n"; break;
      }
      return _ret;
   }

   /**
    * f0 -> Hallocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String) argu;
      if(n.f1.f0.which == 1) {
         Integer hallocated = (Integer) n.f1.accept(this, null);
         printValue += "\t\tli $a0 " + hallocated + "\n";
      }
      else {
         String hallocated = (String) n.f1.accept(this, null);
         printValue += "\t\tmove $a0 " + hallocated + "\n";
      }
      printValue += "\t\tjal _halloc\n";
      printValue += "\t\tmove " + register + "$v0\n";
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String storeRegister = (String) argu;
      Integer opCode = (Integer) n.f0.accept(this, argu);
      String registerUse = (String) n.f1.accept(this, argu);
      String operator ="";
      if(n.f2.f0.which == 1) {
         Integer simpleExp = (Integer) n.f2.accept(this, null);
         switch(opCode) {
            case 0 : {operator = "\t\tslti ";break;}
            case 1 : {operator = "\t\tadd ";break;}
            case 2 : {operator = "\t\tsub ";break;}
            case 3 : {operator = "\t\tmul ";break;}
         }
         printValue += operator + storeRegister + registerUse + simpleExp + "\n";

      }
      else {
        switch(opCode) {
            case 0 : {operator = "\t\tslt ";break;}
            case 1 : {operator = "\t\tadd ";break;}
            case 2 : {operator = "\t\tsub ";break;}
            case 3 : {operator = "\t\tmul ";break;}
         }
        String simpleExp = (String) n.f2.accept(this, null);
        printValue += operator + storeRegister + registerUse + simpleExp + "\n";
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) (Integer) n.f0.which;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer val = (Integer) n.f1.accept(this, argu);
      val *= 4;
      return (R) val;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      if(argu == null)
          return n.f0.accept(this, argu);
      String storeRegister = (String) argu;

      switch(n.f0.which) {
        case 0 : {String simpleExp = (String) n.f0.accept(this, argu);printValue += "\t\tmove " + storeRegister + simpleExp + "\n"; break;}
        case 1 : {Integer simpleExp = (Integer) n.f0.accept(this, argu);printValue += "\t\tli " + storeRegister + simpleExp + "\n"; break;}
        case 2 : {String simpleExp = (String) n.f0.accept(this, argu);printValue += "\t\tla " + storeRegister + simpleExp + "\n"; break;}
      }
      return null;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      switch(n.f0.which) {
        case 0 : return (R) " $a0 ";
        case 1 : return (R) " $a1 ";
        case 2 : return (R) " $a2 ";
        case 3 : return (R) " $a3 ";
        case 4 : return (R) " $t0 ";
        case 5 : return (R) " $t1 ";
        case 6 : return (R) " $t2 ";
        case 7 : return (R) " $t3 ";
        case 8 : return (R) " $t4 ";
        case 9 : return (R) " $t5 ";
        case 10 : return (R) " $t6 ";
        case 11 : return (R) " $t7 ";
        case 12 : return (R) " $s0 ";
        case 13 : return (R) " $s1 ";
        case 14 : return (R) " $s2 ";
        case 15 : return (R) " $s3 ";
        case 16 : return (R) " $s4 ";
        case 17 : return (R) " $s5 ";
        case 18 : return (R) " $s6 ";
        case 19 : return (R) " $s7 ";
        case 20 : return (R) " $t8 ";
        case 21 : return (R) " $t9 ";
        case 22 : return (R) " $v0 ";
        case 23 : return (R) " $v1 ";
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) (Integer) Integer.parseInt(n.f0.toString());
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public R visit(VariablePackingInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

}

