//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   String temp(int number) {
      return " TEMP " + number + " ";
   }

   String label(int number) {
      return " L" + number + " ";
   }

   void println(String a) {
      System.out.println(a);
   }
   int lastUsedTemp = 1000;
   String move = "\n MOVE ";
   String hstore = "\n HSTORE ";
   String hallocate = " HALLOCATE ";
   String ret = "\n RETURN ";
   String hload = "\n HLOAD ";
   String begin = "\n BEGIN \n";
   String end = "\n END \n";
   String print = "\n PRINT ";
   String jump = "\n JUMP ";
   String cjump = "\n CJUMP ";
   String lt = " LT ";
   String plus = " PLUS ";
   String minus = " MINUS ";
   String times = " TIMES ";
   String noop = " NOOP \n";
   String main = "\n MAIN \n";
   String error = "\n ERROR ";
   String call = "\n CALL ";

   String printValue = "";

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      Vector<R> temps = new Vector<R>();
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         temps.addElement(e.nextElement().accept(this,argu));
         _count++;
      }
      return (R) temps;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         Vector<R> temps = new Vector<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            temps.addElement(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) temps;
      }
      else
         return (R) new Vector<R>();
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else {
         String ret = "";
         return (R) ret;
      }
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      printValue += main;
      n.f1.accept(this, argu);
      printValue += end;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      println(printValue);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      Vector<R> stmtList = (Vector<R>) n.f0.accept(this, argu);
      //if(stmtList.size() != 0)
      //printValue += (String) stmtList.remove(0);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String label = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String numberOfArguments = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      printValue += label + " [ " + numberOfArguments + " ] \n";
      printValue += begin;
      String retExpression = (String) n.f4.accept(this, argu);
      printValue += ret + retExpression + "\n";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      printValue += noop;
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      printValue += error;
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String condition = (String) n.f1.accept(this, argu);
      String label = (String) n.f2.accept(this, argu);
      printValue += cjump + condition + label + "\n";
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      printValue += jump + label + "\n";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String address = (String) n.f1.accept(this, argu);
      String offset = (String) n.f2.accept(this, argu);
      String temporary = (String) n.f3.accept(this, argu);
      printValue += hstore + address + offset + temporary + "\n";
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temporary = (String) n.f1.accept(this, argu);
      String address = (String) n.f2.accept(this, argu);
      String offset = (String) n.f3.accept(this, argu);
      printValue += hload + temporary + address + offset + "\n";
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String destination = (String) n.f1.accept(this, argu);
      String source = (String) n.f2.accept(this, argu);
      printValue += move + destination + source + "\n";
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String tempValue = (String) n.f1.accept(this, argu);
      printValue += print + tempValue + "\n";
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String retTemp = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return (R) retTemp;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String caller;
      Vector<R> arguments;
      String retTemp = temp(lastUsedTemp++);
      caller = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      arguments = (Vector<R>) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      printValue += move + retTemp + call + caller + " ( ";
      while(arguments.size() != 0) {
          printValue += (String) arguments.remove(0);

      }
      printValue += " ) \n";
      return (R) retTemp;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String hallocated = (String) n.f1.accept(this, argu);
      String retValue = hallocate + hallocated + "\n";
      return (R) retValue;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String binOp;
      String firstTemp;
      String secondTemp;
      binOp = " " + (String) n.f0.accept(this, argu) + " ";
      firstTemp = (String) n.f1.accept(this, argu);
      secondTemp = (String) n.f2.accept(this, argu);
      String retTemp = temp(lastUsedTemp++);
      printValue += move + retTemp + binOp + firstTemp + secondTemp + "\n";
      return (R) retTemp;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(n.f0.which == 0) return (R) lt;
      if(n.f0.which == 1) return (R) plus;
      if(n.f0.which == 2) return (R) minus;
      return (R) times;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String integer = (String) n.f1.accept(this, argu);
      String temporary = " TEMP " + integer + " ";
      return (R) temporary;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String integer = " " + n.f0.toString() + " ";
      return (R) integer;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = " " + n.f0.toString() + " ";
      return (R) label;
   }

}
